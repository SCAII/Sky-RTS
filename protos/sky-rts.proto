syntax = "proto2";

package scaii.rts;

// A basic list of actions on a per-unit
// basis.
//
// Attempts to control non-owned units
// will yield an error
//
// Units should only have one action per
// message. If an ID is listed multiple times,
// the later one will take precedence.
//
// Not every unit needs an action, if one
// is missing, it is assumed "keep doing what
// it's doing" (finish moving to a location,
// wait for enemies to enter engagement radius,
// etc).
message ActionList {
    repeated UnitAction actions = 1;
}

// A basic action issued to a unit
message UnitAction {
    required uint64 unit_id = 1;
    oneof action {
        MoveTo move_to = 2;
        AttackMove attack_move_to = 3;
        AttackUnit attack_unit = 4;
    }
}

// The position of a unit, or the target
// location to move to
message Pos {
    required double x = 1;
    required double y = 2;
}

// Move to a specific position. If this
// position is unreachable, the unit will
// attempt to get as close as possible.
//
// If the unit does not have movement capabilities,
// this will be ignored.
message MoveTo {
    required Pos pos = 1;
}

// Like `MoveTo`, except it will engage
// any enemies it sees in its engagement radius
// while moving.
//
// If the unit does not have movement capabilities,
// this will be ignored.
message AttackMove {
    required Pos pos = 1;
}

// Follows a given unit, attacking it until
// it dies. 
//
// If the unit cannot move, this
// simply specifies which unit in range to
// attack. If the unit is out of range,
// this is ignored.
message AttackUnit {
    required uint64 target_id = 1;
}

// A delta encoding of a state,
// very similar to `scaii.common.Viz`
message StateUpdate {
    repeated Unit units = 1;
    repeated UnitType unit_types = 2;
}

// Specifies the constants for a unit,
// these are consistent across all units
// with a given ID.
message UnitType {
    required int64 unit_type_id = 1;
    optional double max_hp = 2;
    optional double movable = 3;
}

// The current state of a given unit
message Unit {
    required int64 id = 1;
    optional int64 owner_id = 2;
    optional int64 unit_type_id = 3;
    optional DeltaPos pos = 4;
    optional double hp = 5;
    

    required bool delete =  10;
}

// Like `Pos`, but with only as much info as is
// needed.
message DeltaPos {
    optional double x = 1;
    optional double y = 2;
}